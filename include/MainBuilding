/*#include <windows.h>
#include <gl.h>
#include <vector>
#include "Controller.h"
#include "Elevator.h"
#include "CameraMovementObserver.h"
#include "DrawCube.h"
#include "Object.h"
#include "Stairs.h"
#include "Cube.h"
#include "KeypressObserver.h"
#include "vertex.h"
#include <windows.h>		// Header File For Windows
#include <gl.h>			// Header File For The OpenGL32 Library
#include <glu.h>			// Header File For The GLu32 Library
#include <glaux.h>		// Header File For The Glaux Library
#include "Resources.h"
#include <time.h>     
#include <fstream>
#include <iostream>
#include <cmath>


struct point { double x, y, z; };
struct rectangle { point p; double  xAxis, yAxis, zAxis; };
Cube draw_quad(std::vector<point> v, std::vector<double> texcoor, int out_texture, int in_texture, bool is_rebeated, bool is_blended,bool blocked) {
	Cube c;
	if (blocked){
	if (v[0].x == v[1].x) {
		c = Cube({ v[1].x,v[1].y,v[1].z }, 1, v[2].y - v[1].y, v[1].z - v[0].z, 0);




	}
	else 	c = Cube({ v[0].x,v[0].y,v[0].z }, v[1].x - v[0].x, v[2].y - v[1].y, 1, 0);
	}
	glEnable(GL_TEXTURE_2D);
	if (is_blended)
		glEnable(GL_BLEND);
	glEnable(GL_CULL_FACE);

	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);


	glCullFace(GL_BACK);
	glBindTexture(GL_TEXTURE_2D, in_texture);


	glBegin(GL_QUADS);
	glTexCoord2d(0, 0);
	glVertex3f(v[0].x, v[0].y, v[0].z);
	glTexCoord2d(texcoor[0], 0);
	glVertex3f(v[1].x, v[1].y, v[1].z);
	glTexCoord2d(texcoor[0], texcoor[1]);
	glVertex3f(v[2].x, v[2].y, v[2].z);
	glTexCoord2d(0, texcoor[1]);
	glVertex3f(v[3].x, v[3].y, v[3].z);

	glEnd();



	glFrontFace(GL_CW);
	glCullFace(GL_FRONT);
	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);

	glBindTexture(GL_TEXTURE_2D, out_texture);

	glBegin(GL_QUADS);
	glTexCoord2d(0, 0);
	glVertex3f(v[0].x, v[0].y, v[0].z);
	glTexCoord2d(texcoor[0], 0);
	glVertex3f(v[1].x, v[1].y, v[1].z);
	glTexCoord2d(texcoor[0], texcoor[1]);
	glVertex3f(v[2].x, v[2].y, v[2].z);
	glTexCoord2d(0, texcoor[1]);
	glVertex3f(v[3].x, v[3].y, v[3].z);

	glEnd();

	//glDisable(GL_TEXTURE2D); //***DELETE IT"""
	glDisable(GL_CULL_FACE);
	glDisable(GL_BLEND);
	return c;
}
















class Window {

private: point p1, p2, p3, p4; int tex;
		 Cube c;

public: Window(point p1, point p2, point p3, point p4, int tex) {
	this->p1 = p1;
	this->p2 = p2;
	this->p3 = p3;
	this->p4 = p4;
	this->tex = tex;
}
		int i = 0;
		void draw() {


			c = draw_quad({ p1,p2,p3,p4 }, { 1,1 }, tex, tex, 0, 1,1);
			if (!i)
				camera.addMovementObserver(&c);

			i++;
			i = min(i, 1);
		}



};


class Room {

private: point start;
		 double xAxis, yAxis, zAxis;
		 std::vector<bool> door;
		 std::vector<Cube> cu;

		 bool last_room;
		 int out_texture, in_texture;

public:

	Room() {};
	Room(point start, double xAxis, double yAxis, double zAxis, bool last_room, std::vector<bool> door, int in_texture, int out_texture)
	{
		this->start = start;
		this->xAxis = xAxis;
		this->yAxis = yAxis;
		this->zAxis = zAxis;
		this->door = door;
		this->last_room = last_room;
		this->out_texture = out_texture;
		this->in_texture = in_texture;


	}

	int i = 0;
	Cube c;
	void draw() {

		glEnable(GL_TEXTURE_2D);
		// front 

		if (door[0]) {
			double dr = xAxis / 3;
			c = draw_quad({ { start.x, start.y, start.z },{ start.x + dr, start.y, start.z },{ start.x + dr, start.y + yAxis, start.z },{ start.x, start.y + yAxis, start.z } }, { dr,yAxis }, out_texture, in_texture, 1, 0,1);
			if (!i)
				cu.push_back(c);

			c = draw_quad({ { start.x + 2 * dr, start.y, start.z },{ start.x + xAxis, start.y, start.z },{ start.x + xAxis, start.y + yAxis, start.z } ,{ start.x + 2 * dr, start.y + yAxis, start.z } }, { dr,yAxis }, out_texture, in_texture, 1, 0,1);
			if (!i)
				cu.push_back(c);
			c = draw_quad({ { start.x, start.y + 2 * yAxis / 3, start.z },{ start.x + xAxis, start.y + 2 * yAxis / 3, start.z } ,{ start.x + xAxis, start.y + yAxis , start.z },{ start.x, start.y + yAxis , start.z } }, { xAxis,yAxis / 3 }, out_texture, in_texture, 1, 0,1);
			if (!i)
				cu.push_back(c);
		}
		else {

			c = draw_quad({ { start.x, start.y, start.z },{ start.x + xAxis, start.y, start.z },{ start.x + xAxis, start.y + yAxis, start.z },{ start.x, start.y + yAxis, start.z } }, { xAxis,yAxis }, out_texture, in_texture, 1, 0,1);
			if (!i)
				cu.push_back(c);
		}


		// back
		if (door[1]) {

			double dr = xAxis / 3;


			c = draw_quad({ { start.x, start.y, start.z - zAxis },{ start.x + dr, start.y, start.z - zAxis },{ start.x + dr, start.y + yAxis, start.z - zAxis },{ start.x, start.y + yAxis, start.z - zAxis } }, { dr,yAxis }, in_texture, out_texture, 1, 0,1);
			if (!i)
				cu.push_back(c);
			c = draw_quad({ { start.x + 2 * dr, start.y, start.z - zAxis } ,{ start.x + xAxis, start.y, start.z - zAxis } ,{ start.x + xAxis, start.y + yAxis, start.z - zAxis },{ start.x + 2 * dr, start.y + yAxis, start.z - zAxis } }, { dr,yAxis }, in_texture, out_texture, 1, 0,1);
			if (!i)
				cu.push_back(c);
			c = draw_quad({ { start.x, start.y + 2 * yAxis / 3, start.z - zAxis },{ start.x + xAxis, start.y + 2 * yAxis / 3, start.z - zAxis },{ start.x + xAxis, start.y + yAxis, start.z - zAxis },{ start.x, start.y + yAxis, start.z - zAxis } }, { xAxis,yAxis / 3 }, in_texture, out_texture, 1, 0,1);
			if (!i)
				cu.push_back(c);
		}
		else {

			c = draw_quad({ { start.x, start.y, start.z - zAxis },{ start.x + xAxis, start.y, start.z - zAxis },{ start.x + xAxis, start.y + yAxis, start.z - zAxis },{ start.x, start.y + yAxis, start.z - zAxis } }, { xAxis,yAxis }, in_texture, out_texture, 1, 0,1);
			if (!i)
				cu.push_back(c);

		}

		// left
		if (door[2]) {

			double dr = zAxis / 3;

			c = draw_quad({ { start.x, start.y, start.z - zAxis },{ start.x, start.y, start.z - zAxis + dr },{ start.x, start.y + yAxis, start.z - zAxis + dr },{ start.x, start.y + yAxis, start.z - zAxis } }, { dr,yAxis }, out_texture, in_texture, 1, 0,1);
			if (!i)
				cu.push_back(c);
			c = draw_quad({ { start.x, start.y, start.z - dr },{ start.x, start.y, start.z },{ start.x , start.y + yAxis, start.z } ,{ start.x , start.y + yAxis, start.z - dr } }, { dr,yAxis }, out_texture, in_texture, 1, 0,1);
			if (!i)
				cu.push_back(c);
			c = draw_quad({ { start.x, start.y + 2 * yAxis / 3, start.z - zAxis },{ start.x, start.y + 2 * yAxis / 3, start.z } ,{ start.x, start.y + yAxis, start.z } ,{ start.x, start.y + yAxis, start.z - zAxis } }, { zAxis,yAxis / 3 }, out_texture, in_texture, 1, 0,1);
			if (!i)
				cu.push_back(c);
		}
		else {
			c = draw_quad({ { start.x, start.y, start.z - zAxis },{ start.x, start.y, start.z } ,{ start.x, start.y + yAxis, start.z } ,{ start.x, start.y + yAxis, start.z - zAxis } }, { zAxis,yAxis }, out_texture, in_texture, 1, 0,1);
		}if (!i)
			cu.push_back(c);



		// right
		if (door[3]) {

			double dr = zAxis / 3;

			c = draw_quad({ { start.x + xAxis, start.y, start.z - zAxis },{ start.x + xAxis, start.y, start.z - zAxis + dr },{ start.x + xAxis, start.y + yAxis, start.z - zAxis + dr },{ start.x + xAxis, start.y + yAxis, start.z - zAxis } }, { dr,yAxis }, in_texture, out_texture, 1, 0,1);

			if (!i)
				cu.push_back(c);
			c = draw_quad({ { start.x + xAxis, start.y, start.z - dr },{ start.x + xAxis, start.y, start.z } ,{ start.x + xAxis, start.y + yAxis, start.z },{ start.x + xAxis, start.y + yAxis, start.z - dr } }, { dr,yAxis }, in_texture, out_texture, 1, 0,1);
			if (!i)
				cu.push_back(c);
			c = draw_quad({ { start.x + xAxis, start.y + 2 * yAxis / 3, start.z - zAxis } ,{ start.x + xAxis, start.y + 2 * yAxis / 3, start.z },{ start.x + xAxis, start.y + yAxis, start.z },{ start.x + xAxis, start.y + yAxis, start.z - zAxis } }, { zAxis,yAxis / 3 }, in_texture, out_texture, 1, 0,1);
			if (!i)
				cu.push_back(c);


		}
		else {

			c = draw_quad({ { start.x + xAxis, start.y, start.z - zAxis },{ start.x + xAxis, start.y, start.z },{ start.x + xAxis, start.y + yAxis, start.z },{ start.x + xAxis, start.y + yAxis, start.z - zAxis } }, { zAxis,yAxis }, in_texture, out_texture, 1, 0,1);
			if (!i)
				cu.push_back(c);
		}

		// bottom
		glEnable(GL_BLEND);
		glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
		glColor4f(1, 1, 1, 0.6);
		draw_quad({ { start.x , start.y, start.z } ,{ start.x + xAxis, start.y, start.z } ,{ start.x + xAxis, start.y , start.z - zAxis } ,{ start.x , start.y , start.z - zAxis } }, { zAxis,yAxis }, in_texture, out_texture, 1, 0,1);
		glColor4f(1, 1, 1, 1);
		glDisable(GL_BLEND);

		// up

		glEnable(GL_BLEND);
		glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
		glColor4f(0, 0, 0, 0.3);
		draw_quad({ { start.x, start.y + yAxis, start.z },{ start.x + xAxis, start.y + yAxis, start.z },{ start.x + xAxis, start.y + yAxis, start.z - zAxis } ,{ start.x , start.y + yAxis, start.z - zAxis } }, { zAxis,yAxis }, out_texture, in_texture, 1, 0,1);
		glColor4f(1, 1, 1, 1);
		glDisable(GL_BLEND);

		if (!i) {
			for (int j = 0; j < cu.size(); j++)
				camera.addMovementObserver(&cu[j]);

		}i++;
		i = min(i, 1);


	}



}
;


class Storey {

private:	point start;
			double xAxis, yAxis, zAxis;
			int storey_index;
			int rooms_number;
			std::vector<Room> rooms;
			std::vector<Window> windows;
			std::vector<int> in_textures;
			std::vector<int> out_textures;
			int window_texture;
			rectangle lift_and_stairs_area;
			rectangle elevator_area;
			int in_texture;
			int out_texture;
			Stairs s;
			std::vector<Cube> cu;
			bool last_storey;
public:

	Storey(point start, double xAxis, double yAxis, double zAxis, int storey_index, int rooms_number, std::vector<int> in_textures, std::vector<int> out_textures, int window_texture,bool last_storey)



	{
		this->start = start;
		this->xAxis = xAxis;
		this->yAxis = yAxis;
		this->zAxis = zAxis;
		this->storey_index = storey_index;
		this->rooms_number = rooms_number;
		this->in_textures = in_textures;
		this->out_textures = out_textures;
		this->window_texture = window_texture;
		this->last_storey = last_storey;
		srand(time(0));
		in_texture = in_textures[rand() % in_textures.size()];
		out_texture = out_textures[rand() % out_textures.size()];

		if (rooms_number % 2 == 1 || 6 * xAxis>10 * zAxis || 6 * zAxis >= 10 * xAxis) {
			if (xAxis > zAxis)
			{

				double block = xAxis / (rooms_number*1.0);
				double roomlength = 1 * block / 2;
				for (int r = 0; r < rooms_number; r++) {
					if (storey_index == 0)continue;
					Room rm;
					if (r == 0)				 rm = Room({ start.x + block*r ,start.y,start.z }, roomlength, yAxis, zAxis, (r == 0), { 0,0,0,1,0,0 }, in_texture, out_texture);//convert textures to random
					else
						rm = Room({ start.x + block*r ,start.y,start.z }, roomlength, yAxis, zAxis, (r == 0), { 0,0,1,1,0,0 }, in_texture, out_texture);//convert textures to random
					rooms.push_back(rm);
					Window w = Window({ start.x + block*r + roomlength,start.y,start.z }, { start.x + block*(r + 1),start.y,start.z }, { start.x + block*(r + 1) ,start.y + yAxis,start.z }, { start.x + block*r + roomlength,start.y + yAxis,start.z }, window_texture);
					windows.push_back(w);
					w = Window({ start.x + block*r + roomlength,start.y,start.z - zAxis }, { start.x + block*(r + 1),start.y,start.z - zAxis }, { start.x + block*(r + 1) ,start.y + yAxis,start.z - zAxis }, { start.x + block*r + roomlength,start.y + yAxis,start.z - zAxis }, window_texture);
					windows.push_back(w);
				}


				// lift area on the xaxis 
				double la = 3 * (block - roomlength) / 4;
				lift_and_stairs_area.p = { start.x + xAxis - la,start.y,start.z };
				lift_and_stairs_area.xAxis = la;
				lift_and_stairs_area.zAxis = zAxis;
				lift_and_stairs_area.yAxis = yAxis;


			}
			else
			{

				double block = zAxis / (rooms_number*1.0);
				double roomlength = 1 * block / 2;
				for (int r = 0; r < rooms_number; r++) {
					if (storey_index == 0)continue;

					Room rm;
					if (r == 0)			 rm = Room({ start.x  ,start.y,start.z - block*r }, xAxis, yAxis, roomlength, (r == 0), { 0,1,0,0,0,0 }, in_texture, out_texture);//convert textures to random
					else
						rm = Room({ start.x  ,start.y,start.z - block*r }, xAxis, yAxis, roomlength, (r == 0), { 1,1,0,0,0,0 }, in_texture, out_texture);//convert textures to random				

					rooms.push_back(rm);
					Window w = Window({ start.x ,start.y,start.z - block*(r + 1) }, { start.x ,start.y,start.z - (block*r + roomlength) }, { start.x ,start.y + yAxis,start.z - (block*r + roomlength) }, { start.x  ,start.y + yAxis,start.z - block*(r + 1) }, window_texture);

					windows.push_back(w);
					w = Window({ start.x + xAxis ,start.y,start.z - block*(r + 1) }, { start.x + xAxis ,start.y,start.z - (block*r + roomlength) }, { start.x + xAxis,start.y + yAxis,start.z - (block*r + roomlength) }, { start.x + xAxis ,start.y + yAxis,start.z - block*(r + 1) }, window_texture);

					windows.push_back(w);
				}

				// lift area on the zaxis 
				double la = 3 * (block - roomlength) / 4;

				lift_and_stairs_area.p = { start.x  ,start.y,start.z - zAxis + la };
				lift_and_stairs_area.xAxis = xAxis;
				lift_and_stairs_area.zAxis = la;
				lift_and_stairs_area.yAxis = yAxis;

			}



		}



		else {
			if (xAxis > zAxis)
			{

				double block = 2 * xAxis / (rooms_number*1.0);
				double roomlength = 3 * block / 4;
				double windowlength = block / 4;
				double roomlength2 = (zAxis - windowlength) / 2;
				for (int r = 0; r < rooms_number / 2; r++) {
					if (storey_index == 0)continue;

					Room rm = Room({ start.x + block*r ,start.y,start.z }, roomlength, yAxis, roomlength2, r == 0, { 0,1,0,0,0,0 }, in_texture, out_texture);//convert textures to random
					rooms.push_back(rm);
					rm = Room({ start.x + block*r ,start.y,start.z - (roomlength2 + windowlength) }, roomlength, yAxis, roomlength2, r == 0, { 1,0,0,0,0,0 }, in_texture, out_texture);//convert textures to random
					rooms.push_back(rm);
					Window w = Window({ start.x + block*r + roomlength,start.y,start.z }, { start.x + block*(r + 1),start.y,start.z }, { start.x + block*(r + 1) ,start.y + yAxis,start.z }, { start.x + block*r + roomlength,start.y + yAxis,start.z }, window_texture);
					windows.push_back(w);
					w = Window({ start.x + block*r + roomlength,start.y,start.z - zAxis }, { start.x + block*(r + 1),start.y,start.z - zAxis }, { start.x + block*(r + 1) ,start.y + yAxis,start.z - zAxis }, { start.x + block*r + roomlength,start.y + yAxis,start.z - zAxis }, window_texture);
					windows.push_back(w);
				}
				if (storey_index) {
					Window w = Window({ start.x ,start.y ,start.z - zAxis + roomlength2 }, { start.x ,start.y ,start.z - roomlength2 }, { start.x ,start.y + yAxis ,start.z - roomlength2 }, { start.x ,start.y + yAxis,start.z - zAxis + roomlength2 }, window_texture);
					windows.push_back(w);
				}
				// lift area on the xaxis 
				double la = 3 * (block - roomlength) / 4;
				lift_and_stairs_area.p = { start.x + xAxis - la,start.y,start.z };
				lift_and_stairs_area.xAxis = la;
				lift_and_stairs_area.zAxis = zAxis;
				lift_and_stairs_area.yAxis = yAxis;

			}
			else
			{
				double block = 2 * zAxis / (rooms_number*1.0);
				double roomlength = 3 * block / 4;
				double windowlength = block / 4;
				double roomlength2 = (xAxis - windowlength) / 2;
				for (int r = 0; r < rooms_number / 2; r++) {
					if (storey_index == 0)continue;

					Room rm = Room({ start.x  ,start.y,start.z - block*r }, roomlength2, yAxis, roomlength, r == 0, { 0,0,0,1,0,0 }, in_texture, out_texture);//convert textures to random
					rooms.push_back(rm);
					rm = Room({ start.x + roomlength2 + windowlength ,start.y,start.z - block*r }, roomlength2, yAxis, roomlength, r == 0, { 0,0,1,0,0,0 }, in_texture, out_texture);//convert textures to random
					rooms.push_back(rm);

					Window w = Window({ start.x ,start.y,start.z - block*(r + 1) }, { start.x ,start.y,start.z - (block*r + roomlength) }, { start.x ,start.y + yAxis,start.z - (block*r + roomlength) }, { start.x  ,start.y + yAxis,start.z - block*(r + 1) }, window_texture);

					windows.push_back(w);
					w = Window({ start.x + xAxis ,start.y,start.z - block*(r + 1) }, { start.x + xAxis ,start.y,start.z - (block*r + roomlength) }, { start.x + xAxis,start.y + yAxis,start.z - (block*r + roomlength) }, { start.x + xAxis ,start.y + yAxis,start.z - block*(r + 1) }, window_texture);
					windows.push_back(w);
					if (storey_index) {
						Window w = Window({ start.x + roomlength2 ,start.y ,start.z }, { start.x + 2 * roomlength2 ,start.y ,start.z }, { start.x + 2 * roomlength2,start.y + yAxis ,start.z }, { start.x + roomlength2,start.y + yAxis,start.z }, window_texture);
						windows.push_back(w);
					}
				}
				// lift area on the zaxis 
				double la = 3 * (block - roomlength) / 4;
				lift_and_stairs_area.p = { start.x  ,start.y,start.z - zAxis + la };
				lift_and_stairs_area.xAxis = xAxis;
				lift_and_stairs_area.zAxis = la;
				lift_and_stairs_area.yAxis = yAxis;
			}



		};



		if (xAxis > zAxis)
		{
			elevator_area.p = { lift_and_stairs_area.p.x + lift_and_stairs_area.xAxis / 2,lift_and_stairs_area.p.y,lift_and_stairs_area.p.z - 7 * lift_and_stairs_area.zAxis / 8 };
			elevator_area.xAxis = lift_and_stairs_area.xAxis / 4;
			elevator_area.yAxis = yAxis;
			elevator_area.zAxis = lift_and_stairs_area.zAxis / 8 - 1;
		}
		else {

			draw_quad({ { lift_and_stairs_area.p.x + 7 * lift_and_stairs_area.xAxis / 8,lift_and_stairs_area.p.y,lift_and_stairs_area.p.z - lift_and_stairs_area.zAxis / 2 },{ lift_and_stairs_area.p.x + lift_and_stairs_area.xAxis - 2,lift_and_stairs_area.p.y,lift_and_stairs_area.p.z - lift_and_stairs_area.zAxis / 2 },{ lift_and_stairs_area.p.x + lift_and_stairs_area.xAxis - 2,lift_and_stairs_area.p.y,lift_and_stairs_area.p.z - 3 * lift_and_stairs_area.zAxis / 4 },{ lift_and_stairs_area.p.x + 7 * lift_and_stairs_area.xAxis / 8,lift_and_stairs_area.p.y,lift_and_stairs_area.p.z - 3 * lift_and_stairs_area.zAxis / 4 } }, { lift_and_stairs_area.xAxis,lift_and_stairs_area.zAxis / 2 }, { 1 }, { 1 }, 1, 1, 0);

			elevator_area.p = { lift_and_stairs_area.p.x + 7 * lift_and_stairs_area.xAxis / 8,lift_and_stairs_area.p.y,lift_and_stairs_area.p.z - lift_and_stairs_area.zAxis / 2 };
			elevator_area.xAxis = lift_and_stairs_area.xAxis / 8-1;
			elevator_area.yAxis = yAxis;
			elevator_area.zAxis = lift_and_stairs_area.zAxis / 4;

		}



	}



	int i = 0;

	rectangle getLiftAndStairsArea() { return lift_and_stairs_area; };
	rectangle getElevatorArea() { return elevator_area; };

	void draw() {


		Cube c;


		if (rooms_number % 2 == 1 || 6 * xAxis>10 * zAxis || 6 * zAxis >= 10 * xAxis) {
			if (xAxis > zAxis)
			{

				double block = xAxis / (rooms_number*1.0);
				double roomlength = 1 * block / 2;
				// bottom
				glEnable(GL_BLEND);
				glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
				glColor4f(1, 1, 1, 0.6);
				draw_quad({ { start.x, start.y, start.z },{ start.x + xAxis - 3 * (block - roomlength) / 4, start.y, start.z },{ start.x + xAxis - 3 * (block - roomlength) / 4, start.y, start.z - zAxis } ,{ start.x, start.y, start.z - zAxis } }, { xAxis,zAxis }, out_texture, out_texture, 1, 0,1);
				glColor4f(1, 1, 1, 1);
				glDisable(GL_BLEND);
				// up
				glEnable(GL_BLEND);
				glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
				draw_quad({ { start.x, start.y + yAxis, start.z },{ start.x + xAxis - 3 * (block - roomlength) / 4, start.y + yAxis, start.z },{ start.x + xAxis - 3 * (block - roomlength) / 4, start.y + yAxis, start.z - zAxis } ,{ start.x, start.y + yAxis, start.z - zAxis } }, { xAxis,zAxis }, out_texture, in_texture, 1, 0,1);
				glColor4f(1, 1, 1, 1);
				glDisable(GL_BLEND);










			}
			else
			{
				double block = zAxis / (rooms_number*1.0);
				double roomlength = 1 * block / 2;




				//buttom
				glEnable(GL_BLEND);
				glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
				glColor4f(1, 1, 1, 0.6);
				draw_quad({ { start.x, start.y, start.z },{ start.x + xAxis, start.y, start.z },{ start.x + xAxis, start.y, start.z - zAxis + 3 * (block - roomlength) / 4 } ,{ start.x, start.y, start.z - zAxis + 3 * (block - roomlength) / 4 } }, { xAxis,zAxis }, out_texture, out_texture, 1, 0,1);
				glColor4f(1, 1, 1, 1);
				glDisable(GL_BLEND);
				// up
				glEnable(GL_BLEND);
				glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
				//	 glColor4f(0, 0, 0, 1);
				draw_quad({ { start.x, start.y + yAxis, start.z },{ start.x + xAxis, start.y + yAxis, start.z },{ start.x + xAxis, start.y + yAxis, start.z - zAxis + 3 * (block - roomlength) / 4 } ,{ start.x, start.y + yAxis, start.z - zAxis + 3 * (block - roomlength) / 4 } }, { xAxis,zAxis }, out_texture, in_texture, 1, 0,1);
				glColor4f(1, 1, 1, 1);
				glDisable(GL_BLEND);
			}

		}



		else {
			if (xAxis > zAxis)
			{

				double block = 2 * xAxis / (rooms_number*1.0);
				double roomlength = 3 * block / 4;
				double windowlength = block / 4;
				double roomlength2 = (zAxis - windowlength) / 2;
				// bottom
				glEnable(GL_BLEND);
				glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
				glColor4f(1, 1, 1, 0.6);
				draw_quad({ { start.x, start.y, start.z },{ start.x + xAxis - 3 * (block - roomlength) / 4, start.y, start.z },{ start.x + xAxis - 3 * (block - roomlength) / 4, start.y, start.z - zAxis } ,{ start.x, start.y, start.z - zAxis } }, { xAxis,zAxis }, out_texture, out_texture, 1, 0,1);
				glColor4f(1, 1, 1, 1);
				glDisable(GL_BLEND);
				// up
				glEnable(GL_BLEND);
				glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
				//	 glColor4f(0, 0, 0, 1);
				draw_quad({ { start.x, start.y + yAxis, start.z },{ start.x + xAxis - 3 * (block - roomlength) / 4, start.y + yAxis, start.z },{ start.x + xAxis - 3 * (block - roomlength) / 4, start.y + yAxis, start.z - zAxis } ,{ start.x, start.y + yAxis, start.z - zAxis } }, { xAxis,zAxis }, out_texture, in_texture, 1, 0,1);
				glColor4f(1, 1, 1, 1);
				glDisable(GL_BLEND);



			}
			else
			{
				double block = 2 * zAxis / (rooms_number*1.0);
				double roomlength = 3 * block / 4;
				double windowlength = block / 4;
				double roomlength2 = (xAxis - windowlength) / 2;
				//buttom
				glEnable(GL_BLEND);
				glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
				glColor4f(1, 1, 1, 0.6);
				draw_quad({ { start.x, start.y, start.z },{ start.x + xAxis, start.y, start.z },{ start.x + xAxis, start.y, start.z - zAxis + 3 * (block - roomlength) / 4 } ,{ start.x, start.y, start.z - zAxis + 3 * (block - roomlength) / 4 } }, { xAxis,zAxis }, out_texture, out_texture, 1, 0,1);
				glColor4f(1, 1, 1, 1);
				glDisable(GL_BLEND);
				// up
				glEnable(GL_BLEND);
				glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
				//	 glColor4f(0, 0, 0, 1);
				draw_quad({ { start.x, start.y + yAxis, start.z },{ start.x + xAxis, start.y + yAxis, start.z },{ start.x + xAxis, start.y + yAxis, start.z - zAxis + 3 * (block - roomlength) / 4 } ,{ start.x, start.y + yAxis, start.z - zAxis + 3 * (block - roomlength) / 4 } }, { xAxis,zAxis }, out_texture, in_texture, 1, 0,1);
				glColor4f(1, 1, 1, 1);
				glDisable(GL_BLEND);
			}
		}



		if (storey_index == 0) {
			// front
			c = draw_quad({ { start.x, start.y, start.z },{ start.x + xAxis / 3, start.y, start.z },{ start.x + xAxis / 3, start.y + yAxis, start.z },{ start.x, start.y + yAxis, start.z } }, { xAxis / 3,yAxis }, out_texture, in_texture, 1, 0,1);
			if (!i)cu.push_back(c);
			c = draw_quad({ { start.x + 2 * xAxis / 3, start.y, start.z },{ start.x + xAxis, start.y, start.z },{ start.x + xAxis, start.y + yAxis, start.z },{ start.x + 2 * xAxis / 3, start.y + yAxis, start.z } }, { xAxis / 3,yAxis }, out_texture, in_texture, 1, 0,1);
			if (!i)cu.push_back(c);
			c = draw_quad({ { start.x, start.y + yAxis / 2, start.z },{ start.x + xAxis, start.y + yAxis / 2, start.z },{ start.x + xAxis, start.y + yAxis, start.z } ,{ start.x, start.y + yAxis, start.z } }, { xAxis,yAxis / 2 }, out_texture, in_texture, 1, 0,1);
			if (!i)cu.push_back(c);

			// back

			c = draw_quad({ { start.x, start.y, start.z - zAxis },{ start.x + xAxis, start.y, start.z - zAxis },{ start.x + xAxis, start.y + yAxis, start.z - zAxis },{ start.x, start.y + yAxis, start.z - zAxis } }, { xAxis,zAxis }, in_texture, out_texture, 1, 0,1);
			if (!i)cu.push_back(c);


			// left

			c = draw_quad({ { start.x, start.y, start.z - zAxis },{ start.x , start.y, start.z },{ start.x , start.y + yAxis, start.z },{ start.x, start.y + yAxis, start.z - zAxis } }, { xAxis,zAxis }, out_texture, in_texture, 1, 0,1);
			if (!i)cu.push_back(c);

			// right
			c = draw_quad({ { start.x + xAxis, start.y, start.z - zAxis },{ start.x + xAxis, start.y, start.z },{ start.x + xAxis, start.y + yAxis, start.z },{ start.x + xAxis, start.y + yAxis, start.z - zAxis } }, { xAxis,zAxis }, in_texture, out_texture, 1, 0,1);
			if (!i)cu.push_back(c);

			//buttom 
			draw_quad({ { start.x, start.y+0.5, start.z },{ start.x + xAxis, start.y+0.5, start.z },{ start.x + xAxis, start.y+0.5, start.z - zAxis  } ,{ start.x, start.y+0.5, start.z - zAxis} }, { xAxis,zAxis }, out_texture, out_texture, 1, 0, 1);

		}


		if (xAxis > zAxis) {
			draw_quad({ { lift_and_stairs_area.p.x,lift_and_stairs_area.p.y,lift_and_stairs_area.p.z - lift_and_stairs_area.zAxis / 2 }, { lift_and_stairs_area.p.x + lift_and_stairs_area.xAxis,lift_and_stairs_area.p.y,lift_and_stairs_area.p.z - lift_and_stairs_area.zAxis / 2 },{  lift_and_stairs_area.p.x +lift_and_stairs_area.xAxis,lift_and_stairs_area.p.y,lift_and_stairs_area.p.z - lift_and_stairs_area.zAxis  },{ lift_and_stairs_area.p.x,lift_and_stairs_area.p.y,lift_and_stairs_area.p.z - lift_and_stairs_area.zAxis  }}, { lift_and_stairs_area.xAxis,lift_and_stairs_area.zAxis / 2 }, { glass_window_texture2 }, { glass_window_texture2 }, 1, 1, 0);
				draw_quad({ { lift_and_stairs_area.p.x+lift_and_stairs_area.xAxis/2,lift_and_stairs_area.p.y,lift_and_stairs_area.p.z -7* lift_and_stairs_area.zAxis / 8 },{ lift_and_stairs_area.p.x + 3*lift_and_stairs_area.xAxis/4,lift_and_stairs_area.p.y,lift_and_stairs_area.p.z - 7*lift_and_stairs_area.zAxis / 8 },{ lift_and_stairs_area.p.x + 3*lift_and_stairs_area.xAxis/4,lift_and_stairs_area.p.y,lift_and_stairs_area.p.z - lift_and_stairs_area.zAxis+2 },{ lift_and_stairs_area.p.x+lift_and_stairs_area.xAxis/2,lift_and_stairs_area.p.y,lift_and_stairs_area.p.z - lift_and_stairs_area.zAxis+2 } }, { lift_and_stairs_area.xAxis,lift_and_stairs_area.zAxis / 2 }, { 1 }, { 1}, 1, 1, 0);
			

		
		}
		else {

			draw_quad({ { lift_and_stairs_area.p.x+lift_and_stairs_area.xAxis/2,lift_and_stairs_area.p.y,lift_and_stairs_area.p.z  },{ lift_and_stairs_area.p.x + lift_and_stairs_area.xAxis,lift_and_stairs_area.p.y,lift_and_stairs_area.p.z},{ lift_and_stairs_area.p.x + lift_and_stairs_area.xAxis,lift_and_stairs_area.p.y,lift_and_stairs_area.p.z - lift_and_stairs_area.zAxis },{ lift_and_stairs_area.p.x+lift_and_stairs_area.xAxis/2,lift_and_stairs_area.p.y,lift_and_stairs_area.p.z - lift_and_stairs_area.zAxis } }, { lift_and_stairs_area.xAxis,lift_and_stairs_area.zAxis / 2 }, { glass_window_texture2 }, { glass_window_texture2 }, 1, 1, 0);
			draw_quad({ { lift_and_stairs_area.p.x + 7*lift_and_stairs_area.xAxis / 8,lift_and_stairs_area.p.y,lift_and_stairs_area.p.z -   lift_and_stairs_area.zAxis /2 },{ lift_and_stairs_area.p.x +  lift_and_stairs_area.xAxis -2,lift_and_stairs_area.p.y,lift_and_stairs_area.p.z -  lift_and_stairs_area.zAxis / 2 },{ lift_and_stairs_area.p.x +  lift_and_stairs_area.xAxis -2,lift_and_stairs_area.p.y,lift_and_stairs_area.p.z -3* lift_and_stairs_area.zAxis/4  },{ lift_and_stairs_area.p.x + 7*lift_and_stairs_area.xAxis / 8,lift_and_stairs_area.p.y,lift_and_stairs_area.p.z -3* lift_and_stairs_area.zAxis /4 } }, { lift_and_stairs_area.xAxis,lift_and_stairs_area.zAxis / 2 }, { 1 }, { 1 }, 1, 1, 0);



		}




		if (!i) {
			if (xAxis > zAxis&&storey_index) {
				Window w = Window({ lift_and_stairs_area.p.x + lift_and_stairs_area.xAxis,lift_and_stairs_area.p.y,lift_and_stairs_area.p.z - lift_and_stairs_area.zAxis }, { lift_and_stairs_area.p.x + lift_and_stairs_area.xAxis,lift_and_stairs_area.p.y,lift_and_stairs_area.p.z }, { lift_and_stairs_area.p.x + lift_and_stairs_area.xAxis,lift_and_stairs_area.p.y + lift_and_stairs_area.yAxis,lift_and_stairs_area.p.z }, { lift_and_stairs_area.p.x + lift_and_stairs_area.xAxis,lift_and_stairs_area.p.y + yAxis,lift_and_stairs_area.p.z - lift_and_stairs_area.zAxis }, window_texture);
				windows.push_back(w);
			}
			else if (zAxis>=xAxis&&storey_index){
				Window w = Window({ lift_and_stairs_area.p.x ,lift_and_stairs_area.p.y,lift_and_stairs_area.p.z - lift_and_stairs_area.zAxis }, { lift_and_stairs_area.p.x + lift_and_stairs_area.xAxis,lift_and_stairs_area.p.y,lift_and_stairs_area.p.z - lift_and_stairs_area.zAxis }, { lift_and_stairs_area.p.x + lift_and_stairs_area.xAxis,lift_and_stairs_area.p.y + lift_and_stairs_area.yAxis,lift_and_stairs_area.p.z - lift_and_stairs_area.zAxis }, { lift_and_stairs_area.p.x ,lift_and_stairs_area.p.y + yAxis,lift_and_stairs_area.p.z - lift_and_stairs_area.zAxis }, window_texture);
				windows.push_back(w);
			}

			if (xAxis > zAxis) {


				if (storey_index % 2 == 0)
					s = Stairs(lift_and_stairs_area.p.x, lift_and_stairs_area.p.y - 1, lift_and_stairs_area.p.z - 1, lift_and_stairs_area.xAxis / 2, lift_and_stairs_area.zAxis / 2, lift_and_stairs_area.yAxis + 2, 0);
				else
					s = Stairs(lift_and_stairs_area.p.x + lift_and_stairs_area.xAxis, lift_and_stairs_area.p.y - 1, lift_and_stairs_area.p.z - lift_and_stairs_area.zAxis / 2 - 1, lift_and_stairs_area.xAxis / 2, lift_and_stairs_area.zAxis / 2, lift_and_stairs_area.yAxis +2, 180);

				c = Cube({ lift_and_stairs_area.p.x, lift_and_stairs_area.p.y - 1, lift_and_stairs_area.p.z - 3 }, 1, yAxis + 1, zAxis / 2, 0);
				cu.push_back(c);
				c = Cube({ lift_and_stairs_area.p.x + lift_and_stairs_area.xAxis / 2, lift_and_stairs_area.p.y - 1, lift_and_stairs_area.p.z - 3 }, 1, yAxis + 1, zAxis / 2, 0);
				cu.push_back(c);
				c = Cube({ lift_and_stairs_area.p.x + lift_and_stairs_area.xAxis, lift_and_stairs_area.p.y - 1, lift_and_stairs_area.p.z - 3 }, 1, yAxis + 1, zAxis / 2,  0);
				cu.push_back(c);


			}

			else {

				if (storey_index % 2 == 0&&!last_storey)
					s = Stairs(lift_and_stairs_area.p.x + 2, lift_and_stairs_area.p.y - 1, lift_and_stairs_area.p.z - lift_and_stairs_area.zAxis / 2, lift_and_stairs_area.zAxis / 2, lift_and_stairs_area.xAxis / 2, lift_and_stairs_area.yAxis + 2.3, -90);
				else if (storey_index%2&&!last_storey)
					s = Stairs(lift_and_stairs_area.p.x + lift_and_stairs_area.xAxis / 2 + 2, lift_and_stairs_area.p.y - 1, lift_and_stairs_area.p.z - lift_and_stairs_area.zAxis / 2, lift_and_stairs_area.zAxis / 2, lift_and_stairs_area.xAxis / 2, lift_and_stairs_area.yAxis + 2.3, 90);
				int a[] = { 1,1,1,1,1,1 };

				c = Cube({ lift_and_stairs_area.p.x + 4, lift_and_stairs_area.p.y - 1, lift_and_stairs_area.p.z }, xAxis / 2 - 2, yAxis + 1, 1,  0);
				cu.push_back(c);
				c = Cube({ lift_and_stairs_area.p.x + 4, lift_and_stairs_area.p.y - 1, lift_and_stairs_area.p.z - lift_and_stairs_area.zAxis / 2 }, xAxis / 2 - 2, yAxis + 1, 1, 0);
				cu.push_back(c);
				c = Cube({ lift_and_stairs_area.p.x + 4, lift_and_stairs_area.p.y - 1, lift_and_stairs_area.p.z - lift_and_stairs_area.zAxis }, xAxis / 2 - 2, yAxis + 1, 1, 0);
				cu.push_back(c);





			}
			for (int j = 0; j < cu.size(); j++) {
				camera.addMovementObserver(&cu[j]);
			}
			camera.addMovementObserver(&s);

		}
		i++;
		i = min(i, 1);




		for (int i = 0; i < rooms.size(); i++)
			rooms[i].draw();
		for (int i = 0; i < windows.size(); i++)
			windows[i].draw();
		if (!last_storey)
		s.draw();
	}
};

class MainBuilding2 {

private: point start;
		 double xAxis, yAxis, zAxis;
		 int storey_number;
		 int rooms_number;
		 std::vector<Storey> storeys;
		 std::vector<int> in_textures;
		 std::vector<int> out_textures;
		 int window_texture;
		 bool zombie_mode;
		 Elevator elevator;
		 rectangle lift_and_stairs_area;
public:
	
	MainBuilding2() {};
	MainBuilding2(point start, double xAxis, double yAxis, double zAxis, int storey_number, int rooms_number, std::vector<int> in_textures, std::vector<int> out_textures, int window_texture, bool zombie_mode)
	{
		this->start = start;
		this->xAxis = xAxis;
		this->yAxis = yAxis;
		this->zAxis = zAxis;
		this->storey_number = storey_number;
		this->rooms_number = rooms_number;
		this->in_textures = in_textures;
		this->out_textures = out_textures;
		this->window_texture = window_texture;
		this->zombie_mode = zombie_mode;
		for (int i = 0; i < storey_number; i++) {
			Storey s = Storey({ start.x,i*yAxis + start.y ,start.z }, xAxis, yAxis, zAxis, i, rooms_number, in_textures, out_textures, window_texture,i==storey_number-1);
			storeys.push_back(s);



		}
		lift_and_stairs_area = storeys[0].getLiftAndStairsArea();
		rectangle r = storeys[0].getElevatorArea();
		
		if (xAxis>zAxis)	elevator = Elevator(r.p.x , r.p.y, r.p.z , r.xAxis, r.zAxis, yAxis/2, start.y+yAxis , 0);

		else	elevator = Elevator(r.p.x  , r.p.y, r.p.z , r.xAxis, r.zAxis, yAxis/2, start.y+yAxis , 0);

		//	camera.addMovementObserver(&ele)












	}

	void draw() {
		draw_quad({ { lift_and_stairs_area.p.x, yAxis*storey_number+storey_number*0.1,lift_and_stairs_area.p.z },{ lift_and_stairs_area.p.x + lift_and_stairs_area.xAxis, yAxis*storey_number+storey_number*0.1,lift_and_stairs_area.p.z },{ lift_and_stairs_area.p.x + lift_and_stairs_area.xAxis, yAxis*storey_number+storey_number*0.1,lift_and_stairs_area.p.z -lift_and_stairs_area.zAxis},{ lift_and_stairs_area.p.x, yAxis*storey_number+storey_number*0.1,lift_and_stairs_area.p.z-lift_and_stairs_area.zAxis } }, { lift_and_stairs_area.xAxis,lift_and_stairs_area.zAxis }, { glass_window_texture2 }, { glass_window_texture2 }, 1, 1, 1);
		elevator.draw();


		if (zombie_mode) {
			glEnable(GL_LIGHTING);
			GLfloat LightDir[] = { 0.0f,0.0f,0.0f,1.0f };
			GLfloat LightPos[] = { start.x,start.y,start.z,1.0f };
			GLfloat LightAmb[] = { 1.0f,0.0f,0.0f,1.0f };
			GLfloat LightDiff[] = { 0.6f,0.6f,0.6f,1.0f };
			GLfloat LightSpec[] = { 0.2f,0.2f,0.2f,1.0f };

			GLfloat ambientColor[] = { 1.0f, 0.2f, 0.2f, 1.0f };

			glLightModelfv(GL_LIGHT_MODEL_AMBIENT, ambientColor);
			glLightModeli(GL_LIGHT_MODEL_LOCAL_VIEWER, false);





			glEnable(GL_LIGHT1);
			glLightfv(GL_LIGHT1, GL_POSITION, LightPos);
			glLightfv(GL_LIGHT1, GL_AMBIENT, LightAmb);
			glLightfv(GL_LIGHT1, GL_DIFFUSE, LightDiff);
			glLightfv(GL_LIGHT1, GL_SPECULAR, LightSpec);
			for (int i = 0; i < storeys.size(); i++)
				storeys[i].draw();
			glDisable(GL_LIGHT1);
			glDisable(GL_LIGHTING);/**************************************************************************************************************
								   DONT FORGET TO REMOVE THIS					   ***********************/


		}

		else for (int i = 0; i < storeys.size(); i++)
			storeys[i].draw();





	}
};
